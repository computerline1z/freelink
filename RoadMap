 - First working release, 0.1
  - open world description format
   - Use XML, zip-compressed for better storage (Like ODF does) ^^
    - We need a spec on the entities of the game.
     1) Hardware
      - Storage media == drives
      - CPU for faster processing/decrypting
      - Modem/Broadband/T[0-9] for faster file transfers
      - Packet Prioritization for deeper chains (otherwise the link stability gets so low it becomes unusable)
       - Maybe say, you can build links safely up to four nodes, and unstable links up to six nodes where there's a chance you'll get disconnected.
        + that's a good idea...I was just about suggest that any "unsafe" nodes will just affect the connection to the last node
         - oh, so you don't get kicked off entirely?
          - That's what I meant by keeping the focus clear. Only the last node can be on to you.
           - How about, if the last node manages to trace you (up to your firewall), it notifies the other computers in your chain and they change their passwords?
          + before you connect, the safety of the chain is determined by the other computers along the chain. the other computers in the chain will not kill your connection.
           - That's already in ... the type of nodes you connect through in relation to the type of adversary you have determines how fast he can trace you. Liek, a back-water connection in
            Nigeria or something will be slow as hell but really hard to trace. Similarly, a CIA node will be pretty hard to trace by a Russian adversary, and somewhat hard by an American adversary,
            and almost trivial for another govt agency.
            + Ah, ok excellent.
           - Should the types of nodes you use provide a limit on transfer rate and/or max chain depth AKA QOS AKA quality?
            - Through a satellite you lose more QOS than by using a closer computer.
            - So you can still build 100-depth nodes if you really, really want but it will be kind of pointless.
             - Actually, that's still bad. Let's make QOS reduction a factor of existing link depth.
              + Definitely. There's probably no need to have a chain longer than 20 nodes
               - Agreed. TOTAL max.
                + Of course that can be adjusted with some multiplying and stuff.
                 - fFreelinkConnDegradationExponent ^^
      - Firewall for delaying traces once they reached your $home
     2) Software
      - Default Software (shell standards)
       - ls or dir? both -omouse |okay -downs
        - include directories? yes, but with max.depth for directories of 1 -omouse | 
         - I was gonna say "no need" :p maybe some pre-made directories like "bin", for software, or "data" for ... data, with automatic file sorting
         - Does the player need to be able to make directories? That leads to the question : what would the player need dirs for? The player doesn't need directories on their own computer perhaps...or when they download a file from a remote machine it could create a directory for that IP (that might be useful)?
          - How about tagging files with their origin IP and including that in ls?
          + that's a good idea...so no directories for players, but on remote computers? 
           - agreed.
       - telnet/connect
       - chain/proxy/forward
      - Extensions
      - Upgrades
     3) Metaware (drives the game)
      - Tracing AI, ICE (see Wikipedia, http://en.wikipedia.org/wiki/Intrusion_Countermeasures_Electronics)
      
   - UTF external string storage for easier translation?
    - Exclusive usage of UTF internally? (that's a new one for me :( But I can learn. -downs)
    - External is better methinks.
     - okay. ...... In XML? :p
     - we need to use something like gettext
  - basic world for testing
  - timing mechanisms (traces, bounces)
  - basic RPG system (extensible computer; modem, etc)
   - Experience allows access to better missions? Liek, "Fame"
  - randomly generated networks/computers/missions?
   - Random networks lead to exploitable graphs. Also hard to make work with a fixed story.
 - Networks
  - ability to purchase shell accounts? (omouse) THAT IS NEAT. (downs)
  - intranet hacking?
   - Access to sub-networks via gateways (downs) (one sub-level only) (omouse) Agreed. But make that a design limitation, not a code limitation.(downs)
 - Income!
  - Missions
   - totally random generated, random generated by templates, or randomized story tree?
    + randomized templates but a randomized story tree contained within?
     + Do we need a real story? I mean, apart from tutorials. (downs)
     + Yes, why not? (omouse)
      + Let's make the story part of the world definition.
  - Hosting servers for random people? (omouse)
   + Naah. Let's not get _too_ realistic here. Also has nothing to do with the rest of the game. (downs)
   + True but you can kill time and still make some cash. (omouse)
   + If you need to kill time, we screwed up. (downs)
  - Stock market
   - You can manipulate shares with your hacks (obviously).
 
 - Programs
  - all will have GUI-counterparts? Or just some?
   - I vote yes. Appeal to the graphics crowd. :)
    - ... should we emulate the network to the level of latency?
     + no, but ping can be useful in determining if a host is up or not
      - Why would a host be not up? imnsho, that only causes time-killing.
       + if you're on the host for too long
        - that's bad. it completely forbids chains longer than five nodes.
         - Remember, the human mind can only focus on MAXIMALLY five to seven things at a time, and most of it will be too busy with the hacking part.
         - Focusing on each part of the tunnel would overload the player.
          + I want to agree, but we could actually test this. Ping == one line of code basically and we can just let the nodes randomly die and see if it's a pain in the ass for us.
           - I can guarantee you that it is. Players hate things they can't control, that surprise them. It screws up their planning. And if you got them to plan, you really don't want to break that.
           - There actually is a practical use for PING.
            - Some hosts might only be reachable from a subnet gateway.
            - Or you might want to check if a host is down from a (D)DOS attack.
             + Ah true. That's a much better idea. -omouse (Whee! -downs) 
  - tracert/showroute -- Let's move this up to entities.
   - Showing an image of how you're connected to a machine? like the connections listing
    - oh, you mean tracert without parameters ... showroute? |Exactly | .. it's not a trace. Traces are already in the game, this would give players the wrong idea. | Oops.
 
 -- Starting points --
 Let's split the entity data up into meta, hard and soft. Though I am not sure how much soft a non-player computer needs.

  - Computers
   - Configuration
    - Storage Media (available space, available file nodes)
     - Files (includes runnable, downloadable code and encrypted data)
   - World Information
    - Name
    - Network IP
    - Type
   - Meta
    - Generic trace algorithms; configurable modes of operation, different behavior depending on system will be slowed down more or less by some types of computers.
     - Example: A university network will have problems tracing your connection through a CIA node.
   
 - File
  - Name (unique ID on that system .. could that cause problems when transferring it elsewhere? ... give data files GUIDs) (if there's a conflict with names from different computers, the computer name or ip could be prepended to the filename?) ( might cause problems if it's overseen ... GUID is easier. ... But also harder to type. Hm.) (manually re-naming + the hidden guid?) (... How about appended GUID and auto-completion via TAB?)
  - Encryption Level
  - Runnable? (runnable files must be unencrypted)
   - Files either contain "gibberish", that is, tense data, or small blocks of text. Executable files fall under the first category.
    - Include an internal scripting language?
     + what do you mean by this? like actual .py/.lua/.whatever that can be executed in-game?
      - kinda like shellscripts, being able to chain in-game commands together.
       + that would be really neat
        - but maybe of limited usability to most players, as it might be hard to grasp
         + maybe not too hard to grasp? It would be worth grasping for players if they're going through a certain routine on connection...or that might make it too easy
          because they might be able to automate a lot of the game away? [... true -downs]
          - Let's leave it out but strive to reduce routine.

 
 - 1.0 Alpha
  - Last phase where radical new ideas can be introduced
 - 1.0 Beta
  - Working command line client
 
 - Post-1.0
  - GUI client
   - gui client on top of command-line or separate? I vote separate.
   - theming of the gui client (CSS style wouldn't be too bad)
    - Agreed.
